from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout
from PyQt5.QtGui import QPixmap
import random 
import sys

app = QApplication([])
window = QWidget()
window.show()
window.setWindowTitle('Виселица')
window.resize(700, 500)

start_button = QPushButton('Новая игра')
start_button.setFixedSize(200, 50)
exit_button = QPushButton('Выход')
exit_button.setFixedSize(200, 50)
continue_button = QPushButton('Продолжить')
continue_button.setFixedSize(200, 50)
highscore_button = QPushButton('Рекорды')
highscore_button.setFixedSize(200, 50)
achievement_button = QPushButton('Достижения')
achievement_button.setFixedSize(200, 50)

h_line1 = QHBoxLayout()
h_line2 = QHBoxLayout()
h_line3 = QHBoxLayout()
h_line4 = QHBoxLayout()
h_line5 = QHBoxLayout()
v_line1 = QVBoxLayout()
h_line1.addWidget(start_button, alignment = Qt.AlignRight)
h_line2.addWidget(continue_button, alignment = Qt.AlignRight)
h_line3.addWidget(highscore_button, alignment = Qt.AlignRight)
h_line4.addWidget(achievement_button, alignment = Qt.AlignRight)
h_line5.addWidget(exit_button, alignment = Qt.AlignRight)
v_line1.addLayout(h_line1)
v_line1.addLayout(h_line2)
v_line1.addLayout(h_line3)
v_line1.addLayout(h_line4)
v_line1.addLayout(h_line5)
window.setLayout(v_line1)

window2 = QWidget()
window2.setWindowTitle('Виселица')

def new_game():
    if start_button.text() == 'Новая игра':
        window.hide()
        window2.show()

main_layout = QVBoxLayout()
right_layout = QVBoxLayout()
top_layout = QHBoxLayout()
alphabet_layout = QVBoxLayout()
words_layout = QVBoxLayout()

right_layout.addLayout(words_layout)
right_layout.addLayout(alphabet_layout)
top_layout.addLayout(right_layout)
main_layout.addLayout(top_layout)
window2.setLayout(main_layout)

s_letters = []
for i in range(3):
    s_letters.append(QHBoxLayout())
    alphabet_layout.addLayout(s_letters[i])

x = 0
i = 0
for letter in 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ':
    button = QPushButton(letter)
    s_letters[i].addWidget(button)
    x += 1
    if x % 11 == 0:
        i += 1
    button.setFixedSize(50, 50)

word = random.choice(['кот', 'собака', 'питон', 'программирование', 'компьютер', 'принтер', 'ноутбук', 'клавиатура', 'телефон', 'игра'])
tries = 0
max_tries = 6
guessed_letters = []

word_label = QLabel(word)
word_label.setGeometry(10, 10, 280, 30)
words_layout.addWidget(word_label)

def check_letter(self):
        letter = input.text().lower()
        input.clear()

        if letter in guessed_letters:
            QMessageBox.warning('Предупреждение', 'Вы уже вводили эту букву!')
            return

        if letter in word:
            guessed_letters.append(letter)
            update_word_label()
            if check_win():
                QMessageBox.information('Победа!', 'Вы выиграли!')
                close()
        else:
            tries += 1
            update_image_label()
            if check_lose():
                QMessageBox.warning('Поражение', 'Вы проиграли!')
                close()

def letter_clicked(self):
    sender = sender()
    sender.setEnabled(False)
    check_letter()

def update_word_label(self):
    text = ''
    for letter in word:
        if letter in guessed_letters:
            text += letter
        else:
            text += ' __ '
    word_label.setText(text)

def check_win(self):
    for letter in word:
        if letter not in guessed_letters:
            return False
    return True

def check_lose(self):
    return tries >= max_tries

def update_image_label(self):
        self.image_label.setPixmap(QPixmap(f'images/hangman{self.tries}.png'))

start_button.clicked.connect(new_game)
exit_button.clicked.connect(window.close)

check_win(button)
check_lose(button)
update_word_label(button)
#letter_clicked(button)

app.exec_()
